// <auto-generated />
using System;
using API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API.Migrations
{
    [DbContext(typeof(APIDbContext))]
    [Migration("20230824112338_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("API.Entities.AdressEntity", b =>
                {
                    b.Property<string>("Adress_Barcode")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Column")
                        .HasColumnType("int");

                    b.Property<int>("Face")
                        .HasColumnType("int");

                    b.Property<int>("Product_Amount")
                        .HasColumnType("int");

                    b.Property<long>("Product_Barcode")
                        .HasColumnType("bigint");

                    b.Property<int>("Row")
                        .HasColumnType("int");

                    b.Property<int>("Shelf_ID")
                        .HasColumnType("int");

                    b.Property<string>("Shelf_ID1")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<long?>("productBarcode")
                        .HasColumnType("bigint");

                    b.HasKey("Adress_Barcode");

                    b.HasIndex("Shelf_ID1");

                    b.HasIndex("productBarcode");

                    b.ToTable("adresses");
                });

            modelBuilder.Entity("API.Entities.BrandEntity", b =>
                {
                    b.Property<int>("Brand_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Brand_Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Brand_ID");

                    b.ToTable("brands");
                });

            modelBuilder.Entity("API.Entities.ProductEntity", b =>
                {
                    b.Property<long>("Barcode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int>("Brand_ID")
                        .HasColumnType("int");

                    b.Property<int>("Brand_ID1")
                        .HasColumnType("int");

                    b.Property<int>("Product_Category_ID")
                        .HasColumnType("int");

                    b.Property<int>("Product_Category_ID1")
                        .HasColumnType("int");

                    b.Property<string>("Product_Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Barcode");

                    b.HasIndex("Brand_ID1");

                    b.HasIndex("Product_Category_ID1");

                    b.ToTable("products");
                });

            modelBuilder.Entity("API.Entities.Product_CategoryEntity", b =>
                {
                    b.Property<int>("Product_Category_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Product_Category_Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Product_Category_ID");

                    b.ToTable("product_Categories");
                });

            modelBuilder.Entity("API.Entities.ShelfEntity", b =>
                {
                    b.Property<string>("Shelf_ID")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Shelf_ID");

                    b.ToTable("shelves");
                });

            modelBuilder.Entity("API.Entities.AdressEntity", b =>
                {
                    b.HasOne("API.Entities.ShelfEntity", "shelf")
                        .WithMany("Adresses")
                        .HasForeignKey("Shelf_ID1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.ProductEntity", "product")
                        .WithMany()
                        .HasForeignKey("productBarcode");

                    b.Navigation("product");

                    b.Navigation("shelf");
                });

            modelBuilder.Entity("API.Entities.ProductEntity", b =>
                {
                    b.HasOne("API.Entities.BrandEntity", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("Brand_ID1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.Product_CategoryEntity", "Product_Category")
                        .WithMany("Products")
                        .HasForeignKey("Product_Category_ID1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Product_Category");
                });

            modelBuilder.Entity("API.Entities.BrandEntity", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("API.Entities.Product_CategoryEntity", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("API.Entities.ShelfEntity", b =>
                {
                    b.Navigation("Adresses");
                });
#pragma warning restore 612, 618
        }
    }
}
