// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(DbContext))]
    [Migration("20230906165436_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("DomainLayer.Models.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AdressBarcode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Column")
                        .HasColumnType("int");

                    b.Property<int>("Face")
                        .HasColumnType("int");

                    b.Property<int>("ProductAmount")
                        .HasColumnType("int");

                    b.Property<int>("Row")
                        .HasColumnType("int");

                    b.Property<int>("ShelfFId")
                        .HasColumnType("int");

                    b.HasKey("AddressId");

                    b.HasIndex("ShelfFId");

                    b.ToTable("addresses");
                });

            modelBuilder.Entity("DomainLayer.Models.Brand", b =>
                {
                    b.Property<int>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("BrandId");

                    b.ToTable("brands");
                });

            modelBuilder.Entity("DomainLayer.Models.Product", b =>
                {
                    b.Property<long>("Barcode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int?>("BrandFId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductCategoryFId")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Barcode");

                    b.HasIndex("BrandFId");

                    b.HasIndex("ProductCategoryFId");

                    b.ToTable("products");
                });

            modelBuilder.Entity("DomainLayer.Models.ProductAddresing", b =>
                {
                    b.Property<int>("ProductAddresingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AddressCode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("AddressFId")
                        .HasColumnType("int");

                    b.Property<string>("AddressedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("AddressedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("PickedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("PickedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("ProductFId")
                        .HasColumnType("bigint");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("ProductAddresingId");

                    b.HasIndex("AddressFId");

                    b.HasIndex("ProductFId");

                    b.ToTable("productAddresings");
                });

            modelBuilder.Entity("DomainLayer.Models.ProductCategory", b =>
                {
                    b.Property<int>("ProductCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ProductsCategoryName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ProductCategoryId");

                    b.ToTable("productCategories");
                });

            modelBuilder.Entity("DomainLayer.Models.ProductShelfDedication", b =>
                {
                    b.Property<int>("ProductShelfDedicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BrandFId")
                        .HasColumnType("int");

                    b.Property<int?>("Column")
                        .HasColumnType("int");

                    b.Property<int?>("Face")
                        .HasColumnType("int");

                    b.Property<int?>("ProductCategoryFId")
                        .HasColumnType("int");

                    b.Property<int?>("Row")
                        .HasColumnType("int");

                    b.Property<string>("Sex")
                        .HasColumnType("longtext");

                    b.Property<int>("ShelfFId")
                        .HasColumnType("int");

                    b.HasKey("ProductShelfDedicationId");

                    b.HasIndex("BrandFId");

                    b.HasIndex("ProductCategoryFId");

                    b.HasIndex("ShelfFId");

                    b.ToTable("productShelfDedications");
                });

            modelBuilder.Entity("DomainLayer.Models.Shelf", b =>
                {
                    b.Property<int>("ShelfId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Column")
                        .HasColumnType("int");

                    b.Property<int>("Face")
                        .HasColumnType("int");

                    b.Property<int>("Row")
                        .HasColumnType("int");

                    b.Property<string>("ShelfName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ShelfId");

                    b.ToTable("shelves");
                });

            modelBuilder.Entity("DomainLayer.Models.Address", b =>
                {
                    b.HasOne("DomainLayer.Models.Shelf", "Shelf")
                        .WithMany("Addresses")
                        .HasForeignKey("ShelfFId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shelf");
                });

            modelBuilder.Entity("DomainLayer.Models.Product", b =>
                {
                    b.HasOne("DomainLayer.Models.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandFId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("DomainLayer.Models.ProductCategory", "ProductCategory")
                        .WithMany("Products")
                        .HasForeignKey("ProductCategoryFId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Brand");

                    b.Navigation("ProductCategory");
                });

            modelBuilder.Entity("DomainLayer.Models.ProductAddresing", b =>
                {
                    b.HasOne("DomainLayer.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressFId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DomainLayer.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductFId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DomainLayer.Models.ProductShelfDedication", b =>
                {
                    b.HasOne("DomainLayer.Models.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandFId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DomainLayer.Models.ProductCategory", "ProductCategory")
                        .WithMany()
                        .HasForeignKey("ProductCategoryFId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("DomainLayer.Models.Shelf", "Shelf")
                        .WithMany()
                        .HasForeignKey("ShelfFId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("ProductCategory");

                    b.Navigation("Shelf");
                });

            modelBuilder.Entity("DomainLayer.Models.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("DomainLayer.Models.ProductCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("DomainLayer.Models.Shelf", b =>
                {
                    b.Navigation("Addresses");
                });
#pragma warning restore 612, 618
        }
    }
}
